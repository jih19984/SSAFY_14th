# 문제
"""
정수 X에 사용할 수 있는 연산은 다음과 같이 세가지이다.
1. X가 3으로 나누어 떨어지면, 3으로 나눈다.
2. X가 2로 나누어 떨어지면, 2로 나눈다.
3. 1을 뺀다.

정수 N이 주어졌을 때, 위 3개의 연산을 적절히 사용해서 1을 만들려고한다.
연산을 사용하는 횟수의 최솟값을 출력하시오.
"""

# 풀이 방법
"""
그리디하게 풀어보자!
3으로 먼저 나누어 떨어지는지 확인
2로 나누어 떨어지는 확인
그 다음 1을 모두 빼준다.
-> 이렇게 하면 안됨

1   :0
2 -> 1  :1
3 -> 1  :1
4 -> 3 -> 1 :2
5 -> 4 -> 2 -> 1 : 2 + 1 = 3
6 -> 2 -> 1 : 1 + 1 = 2
7 -> 6 -> 2 -> 1    : 1 + 2 = 3
8 -> 4 -> 2 -> 1    : 1 + 2 = 3
9 -> 3 -> 1 : 1 + 1 = 2


10 -> 9 -> 3 -> 1  : 1 + 2 = 3
10 -> 5 -> 4 -> 2 -> 1  : 1 + 3 = 4

11 -> 10 -> 9 -> 3 -> 1   :   5
12 -> 6 -> 2 -> 1   : 1 + 2 = 3
12 -> 11 -> 10 -> 9 -> 3 -> 1  :    2 + 3 = 5

<결론>
문제에서 요구하는 건 어떤 경우가 가장 최단 경로일지 생각하는 것이 아닌
모든 경우를 고려해 프로그래밍을 하도록 짜는 것이다!
"""

import sys
input = sys.stdin.readline

N = int(input())
dp = [0] * 1000001
dp[1] = 0

for i in range(2, N+1):
    dp[i] = dp[i-1] + 1 
    
    if i % 3 == 0:
        tmp = 1 + dp[i//3]
        dp[i] = min(tmp, dp[i])

    if i % 2 == 0:
        tmp = 1 + dp[i//2]
        dp[i] = min(tmp, dp[i])
    

print(dp[N])